package view;

import java.awt.FileDialog;
import java.awt.Frame;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import java.io.FilenameFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import model.dao.FileFormatException;
import model.entity.Book;


public class ChonFileAnhJFrame extends javax.swing.JFrame {
    private static File fileImage = null;
    private Book prototype;
    private JLabel whereToPutDemoImage;

    /**
     *
     * @return
     */
    public static File getFileImage() {
        return fileImage;
    }
    /**
     * Creates new form JFrameChonFileAnh
     */
    public ChonFileAnhJFrame(Book prototype, JLabel whereToPutDemoImage) {
        initComponents();
        
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.setLocationRelativeTo(null);
        this.prototype = prototype;
        this.whereToPutDemoImage = whereToPutDemoImage;
        
        FileNameExtensionFilter filter = new FileNameExtensionFilter("png", "jpg", "jpeg", "bmp", "gif");
        jFileChooserFileAnh.setFileFilter(filter);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jFileChooserFileAnh = new javax.swing.JFileChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jFileChooserFileAnh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooserFileAnhActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jFileChooserFileAnh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jFileChooserFileAnh, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void jFileChooserFileAnhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooserFileAnhActionPerformed
        String command = evt.getActionCommand();
        if (command.equals(javax.swing.JFileChooser.APPROVE_SELECTION)) {
            File fileImage = jFileChooserFileAnh.getSelectedFile();
            try {
                prototype.setCover(fileImage);
                
                Image scaledImage = prototype.getCover().getScaledInstance(286, 241, Image.SCALE_SMOOTH);
                whereToPutDemoImage.setIcon(new ImageIcon(scaledImage));
            
            } catch (FileFormatException | IOException ex) {
                Logger.getLogger(ThemTaiLieuFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex.getMessage());
                try {
                    prototype.setCover(null);
                } catch (FileFormatException | IOException ex1) {
                    Logger.getLogger(ChonFileAnhJFrame.class.getName()).log(Level.SEVERE, null, ex1);
                }
            } catch (SQLException ex) {
                Logger.getLogger(ChonFileAnhJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.dispose();
        
        } else if (command.equals(javax.swing.JFileChooser.CANCEL_SELECTION)) {
            // Hiển thị thông báo nếu người dùng hủy chọn file
            javax.swing.JOptionPane.showMessageDialog(this, 
            "Bạn đã hủy chọn file.", 
            "Thông báo", 
            javax.swing.JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jFileChooserFileAnhActionPerformed

    
    public static File openWindowFileChooser() {
        // Tạo Frame để làm nền cho FileDialog
        Frame frame = new Frame();
        frame.setVisible(true);
        frame.setSize(0, 0); // Không cần hiển thị frame, chỉ dùng để làm parent

        // Tạo FileDialog để mở file
        FileDialog fileDialog = new FileDialog(frame, "Select a file", FileDialog.LOAD);
        fileDialog.setDirectory(null); // Đặt thư mục khởi đầu
        
        fileDialog.setFilenameFilter(new FilenameFilter() {
            @Override
            public boolean accept(File dir, String name) {
                String tag = name.substring(name.length() - 4);
                switch (tag) {
                    case ".jpg":
                    case "jpeg":
                    case ".png":
                    case ".bmp":
                    case ".gif":
                        return true;
                }
                return false;
            }
        });

        // Hiển thị hộp thoại
        fileDialog.setSize(1500, 1000);
        fileDialog.setVisible(true);

        frame.dispose(); // Đóng Frame
        if (fileDialog.getFile() == null) {
            return null;
        }
        return new File(fileDialog.getDirectory() + fileDialog.getFile());
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser jFileChooserFileAnh;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
